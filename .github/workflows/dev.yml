name: Deploy Demo Objects

# Controls when the action will run. 
on:
  push:
    branches:
      - Dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python packages
        run: pip install -r requirements.txt

      # Make sure all 7 SNOWFLAKE_ environment variables are set
      # SnowCLI accesses the passowrd directly from the SNOWFLAKE_PASSWORD environmnet variable
      - name: Deploy notebooks
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SF_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SF_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SF_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SF_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SF_SCHEMA }}
        run: |
          snow sql -q "ALTER GIT REPOSITORY snowflake_extensions FETCH" --temporary-connection --account $SF_ACCOUNT --user $SF_USER --role $SF_ROLE --warehouse $SF_WAREHOUSE --database $SF_DATABASE --schema $SF_SCHEMA
          snow sql -q "EXECUTE IMMEDIATE FROM @snowflake_extensions/branches/Dev/scripts/deploy_notebooks.sql USING (env => 'dev', branch => 'Dev')" --temporary-connection --account $SF_ACCOUNT --user $SF_USER --role $SF_ROLE --warehouse $SF_WAREHOUSE --database $SF_DATABASE --schema $SF_SCHEMA

          : # Ideally both Snow CLI and the Python Connector could be configured entirely from env variables
          : #python $GITHUB_WORKSPACE/scripts/deploy_task_dag.py DEMO_DB PROD_SCHEMA
